<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!--认证相关-->
    <!--HashedCredentialsMatcher：认证时密码匹配规则，token中的密码使用md5算法+salt，与数据库返回验证-->
    <bean id = "hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
    </bean>

    <!--授权相关，请求url与用户允许访问的url进行匹配-->
    <bean id = "urlPermissionResolver" class="cn.apeius.usermanage.shiro.UrlPermissionResolver"/>
    <bean id = "resourceCheckFilter" class="cn.apeius.usermanage.shiro.ResourceCheckFilter">
        <property name="unauthorizedUrl" value="/public/unauthorized.jsp"/>
    </bean>

    <!-- Realm，继承AuthorizingRealm,即指定Shiro验证用户登录的类为自定义的MyRealm -->
    <bean id="myRealm" class="cn.apeius.usermanage.shiro.MyRealm">
        <property name="credentialsMatcher" ref="hashedCredentialsMatcher"/>
        <!--缓存-->
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="shiro-authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="shiro-authorizationCache"/>
    </bean>

    <!--CacheManager：缓存管理器-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!--SessionManager:会话管理器-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdUrlRewritingEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <!--是否开启会话验证器，默认是开启的-->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!--设置会话验证调度器，默认就是使用ExecutorServiceSessionValidationScheduler-->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!--设置全局会话超时时间，默认 30 分钟，即如果30分钟内没有访问会话将过期-->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- <property name="sessionListeners">
            <list>
                <bean class="com.concom.security.interfaces.listener.SessionListener"/>
            </list>
        </property> -->
    </bean>
    <!--创建会话 Cookie 的模板-->
    <bean id = "sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--设置 Cookie 名字，默认为 JSESSIONID-->
        <property name="name" value="token"/>
        <!--设置 Cookie 的过期时间，秒为单位，默认-1 表示关闭浏览器时过期 Cookie；-->
        <property name="maxAge" value="1800"/>
    </bean>
    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <!--用于生成会话 ID，默认就是 JavaUuidSessionIdGenerator，使用 java.util.UUID 生成-->
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <!--会话验证调度器-->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!--单位毫秒，验证周期默认60分钟，即3600000，我设置为一天验证一次：86400000-->
        <property name="interval" value="86400000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm"/>
        <!--红色报警是正常的-->
        <property name="authorizer.permissionResolver" ref = "urlPermissionResolver"/>
        <!--CacheManager-->
        <property name="cacheManager" ref="cacheManager"/>
        <!--SessionManager-->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <!--<property name="loginUrl" value="/public/login.html"/>-->
        <property name="loginUrl" value="/public/unauthenticated.jsp"/>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
        <!-- <property name="successUrl" value="/system/main"/> -->
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
        <property name="unauthorizedUrl" value="/public/unauthorized.jsp"/>
        <!-- 自定义过滤器-->
        <property name="filters">
            <map>
                <entry key="resourceCheckFilter" value-ref="resourceCheckFilter"/>
            </map>
        </property>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
        <property name="filterChainDefinitions">
            <value>
                /login = anon
                /logout = logout
                /admin/user/** = authc,resourceCheckFilter
                /admin/role/** = authc,resourceCheckFilter
                /admin/** = authc,resourceCheckFilter
            </value>
        </property>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>